<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security-3.1.xsd">


    <!-- ************************************************************************************************* -->
    <!-- ************************************************************************************************* -->
    <!-- ******************** SPRING SECURITY FILTERS **************************************************** -->
    <!-- ************************************************************************************************* -->
    <!-- ************************************************************************************************* -->


    <!-- The order of filters is important -->
    <!-- These define the processing of user requests as they enter the web application -->
    <bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map path-type="ant">
            <security:filter-chain pattern="/**"
                                   filters="concurrencyFilter,
                                            securityContextPersistenceFilter,
                                            logoutFilter,
                                            usernamePasswordAuthenticationFilter,
                                            anonymousAuthenticationFilter,
                                            exceptionTranslationFilter,
                                            filterSecurityInterceptor" />
        </security:filter-chain-map>
    </bean>
    <!-- http://static.springsource.org/spring-security/site/docs/3.0.x/reference/security-filter-chain.html -->
    <!-- 1) ChannelProcessingFilter, because it might need to redirect to a different protocol -->
    <!-- 2) ConcurrentSessionFilter, because it doesn't use any SecurityContextHolder functionality -->
    <!--    but needs to update the SessionRegistry to reflect ongoing requests from the principal -->
    <!-- 3) SecurityContextPersistenceFilter, so a SecurityContext can be set up in the SecurityContextHolder -->
    <!--    at the beginning of a web request, and any changes to the SecurityContext can be copied to the -->
    <!--    HttpSession when the web request ends (ready for use with the next web request) -->
    <!-- 4) Authentication processing mechanisms - UsernamePasswordAuthenticationFilter, CasAuthenticationFilter, -->
    <!--    BasicAuthenticationFilter etc - so that the SecurityContextHolder can be modified to contain a -->
    <!--    valid Authentication request token -->
    <!-- 5) The SecurityContextHolderAwareRequestFilter, if you are using it to install a Spring Security -->
    <!--    aware HttpServletRequestWrapper into your servlet container -->
    <!-- 6) RememberMeAuthenticationFilter, so that if no earlier authentication processing mechanism updated -->
    <!--    the SecurityContextHolder, and the request presents a cookie that enables remember-me services to -->
    <!--    take place, a suitable remembered Authentication object will be put there -->
    <!-- 7) AnonymousAuthenticationFilter, so that if no earlier authentication processing mechanism updated -->
    <!--    the SecurityContextHolder, an anonymous Authentication object will be put there -->
    <!-- 8) ExceptionTranslationFilter, to catch any Spring Security exceptions so that either an HTTP -->
    <!--    error response can be returned or an appropriate AuthenticationEntryPoint can be launched -->
    <!-- 9) FilterSecurityInterceptor, to protect web URIs and raise exceptions when access is denied -->


    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <property name="sessionRegistry" ref="sessionRegistry" />
        <property name="expiredUrl" value="/login.xhtml?errorcode=201" />
	</bean>


    <!-- The SecurityContextPersistenceFilter is used to set up the SecurityContext, -->
    <!-- which is used throughout the scope of a request to track the authentication -->
    <!-- information related to the requestor for the duration of the entire request. -->
    <bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"/>


    <!-- The basic declaration of the LogoutFilter -->
    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <!-- the post-logout destination -->
        <constructor-arg value="/"/>
        <constructor-arg>
            <array>
                <ref local="logoutHandler"/>
            </array>
        </constructor-arg>
        <property name="filterProcessesUrl" value="/logout.do"/>
    </bean>
    <bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>


    <!-- UsernamePasswordAuthenticationFilter is used to process form submission and -->
    <!-- check with the authentication store for valid credentials. -->
    <bean id="usernamePasswordAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="filterProcessesUrl" value="/login.do" />
        <property name="usernameParameter" value="username" />
        <property name="passwordParameter" value="password" />
        <property name="authenticationManager" ref="customAuthenticationManager"/>
        <property name="sessionAuthenticationStrategy" ref="concurrentSessionControlStrategy"/>
        <property name="authenticationFailureHandler" ref="authenticationFailureHandler"/>
    </bean>
    <bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="defaultFailureUrl" value="/login.xhtml?errorcode=300"/>
    </bean>
    <bean id="concurrentSessionControlStrategy" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry" />
        <property name="maximumSessions" value="1" />
        <!-- because we want to migrate sessions (oldest session will be deactivated) -->
        <property name="exceptionIfMaximumExceeded" value="false" />
	</bean>
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />


    <!-- Our site needs to allow anonymous access. Although there are very specific -->
    <!-- conditions where the AnonymousAuthenticationFilter isn't required, typically -->
    <!-- it should be used, as it adds very little overhead to request processing. -->
    <bean id="anonymousAuthenticationFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
        <property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
        <property name="key" value="BF93JFJ091N00Q7HF"/>
    </bean>

    <!-- The final servlet filter in the standard Spring Security filter chain is the ExceptionTranslationFilter. -->
    <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <property name="authenticationEntryPoint" ref="authenticationEntryPoint"/>
        <property name="accessDeniedHandler" ref="accessDeniedHandler"/>
    </bean>
    <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/login.xhtml?errorcode=150"/>
    </bean>
    <bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
        <property name="errorPage" value="/accessDenied.xhtml"/>
    </bean>


    <!-- The final filter in our basic processing chain is the filter that is ultimately responsible -->
    <!-- for checking the Authentication object, which is the result of prior processing by -->
    <!-- the configured security filters. This is the filter that determines whether or not a -->
    <!-- particular request is ultimately rejected or accepted. -->
    <bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager" ref="customAuthenticationManager"/>
        <property name="accessDecisionManager" ref="affirmativeBased"/>
        <property name="securityMetadataSource">
            <!--<security:filter-security-metadata-source>-->
            <security:filter-security-metadata-source use-expressions="true">
                <!--
                <security:intercept-url pattern="/javax.faces.resource/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/favicon.ico" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/index.html" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/home.xhtml" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/login.xhtml" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <security:intercept-url pattern="/*" access="ROLE_USER,ROLE_ADMIN"/>
                <security:intercept-url pattern="/secure/*" access="ROLE_USER,ROLE_ADMIN"/>
                <security:intercept-url pattern="/secure/account/**" access="ROLE_ADMIN"/>
                -->

                <!-- allow basic sites -->
                <security:intercept-url pattern="/javax.faces.resource/**" access="permitAll"/>
                <security:intercept-url pattern="/favicon.ico" access="permitAll"/>
                <security:intercept-url pattern="/index.html" access="permitAll"/>
                <security:intercept-url pattern="/home.xhtml" access="permitAll"/>
                <security:intercept-url pattern="/login.xhtml" access="permitAll"/>

                <!-- allow role: ROLE_USER and ROLE_ADMIN -->
                <security:intercept-url pattern="/secure/*" access="hasRole('ROLE_USER')"/>

                <!-- allow role: ROLE_ADMIN -->
                <!--<security:intercept-url pattern="/secure/*" access="hasRole('ROLE_ADMIN')"/>-->
                <security:intercept-url pattern="/secure/account/*" access="hasRole('ROLE_ADMIN')"/>

                <!-- all other resources should be denied: deny all access -->
                <security:intercept-url pattern="/**" access="denyAll"/>
            </security:filter-security-metadata-source>
        </property>
    </bean>



    <!-- ************************************************************************************************* -->
    <!-- ************************************************************************************************* -->
    <!-- *************************** SUPPORTING OBJECTS ************************************************** -->
    <!-- ************************************************************************************************* -->
    <!-- ************************************************************************************************* -->

    <!-- If any voter grants access, access is immediately granted, regardless of previous denials. -->
    <!--
    <bean id="affirmativeBased" class="org.springframework.security.access.vote.AffirmativeBased">
        <property name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="authenticatedVoter"/>
            </list>
        </property>
    </bean>
    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter"/>
    <bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter"/>
    -->
    <!-- Explicit configuration of the SpEL expression evaluator and voter -->
    <bean id="affirmativeBased" class="org.springframework.security.access.vote.AffirmativeBased" >
        <property name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="expressionVoter"/>
                <ref bean="authenticatedVoter"/>
            </list>
        </property>
    </bean>
    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter"/>
    <bean id="expressionVoter" class="org.springframework.security.web.access.expression.WebExpressionVoter" >
        <property name="expressionHandler" ref="expressionHandler"/>
    </bean>
    <bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter"/>
    <bean id="expressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>




    <!-- It is responsible for providing credential validation to the AuthenticationManager. Some -->
    <!-- AuthenticationProvider implementations partially base their acceptance of credentials on a -->
    <!-- credential store, such as a database. -->
    <bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="saltSource" ref="saltSource"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="userDetailsService" ref="myUserService"/>
    </bean>
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>
    <bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <property name="userPropertyToUse" value="username"/>
    </bean>

    <!-- the key property of the AnonymousAuthenticationProvider must match the -->
    <!-- key property that we previously defined for the AnonymousAuthenticationFilter -->
    <bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
        <property name="key" value="BF93JFJ091N00Q7HF"/>
    </bean>

    <!-- It is responsible for validating the user's credentials, and either throwing specific exceptions (in -->
    <!-- case of authentication failure), or filling out the Authentication object completely, notably including -->
    <!-- authority information. -->
    <bean id="customAuthenticationManager" class="org.springframework.security.authentication.ProviderManager">
        <property name="providers">
            <list>
                <ref local="daoAuthenticationProvider"/>
                <ref local="anonymousAuthenticationProvider"/>
            </list>
        </property>
    </bean>


    <!-- ************************************************************************************************* -->
    <!-- ************************************************************************************************* -->
    <!-- ****************************** Services ********************************************************* -->
    <!-- ************************************************************************************************* -->
    <!-- ************************************************************************************************* -->
    <bean id="myUserService" class="org.helloworld.example.security.MyUserDetailsService"/>


</beans>
